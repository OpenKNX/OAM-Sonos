;
; global custom
;
[custom]
debug_build_flags =
  -O3
build_flags =
  ${KNX_TP.build_flags}
  -D KNX_FLASH_CALLBACK
  -D OPENKNX_DUALCORE
lib_deps = 
  ESP Async WebServer
  https://github.com/tmittet/microxpath.git



[custom_develop]
extends = custom
build_flags =
  ${custom.build_flags}
  -D OPENKNX_HEARTBEAT
  ; ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  "-D OPENKNX_TRACE1=Sonos.*"
  ;"-D OPENKNX_TRACE2=Logic.*"
  ;"-D OPENKNX_TRACE3=*.*"
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240
; RP2040
[RP2040_custom]
extends = RP2040, custom
build_flags =
  -D SERIAL_DEBUG=Serial

[env:develop_RP2040]
extends = RP2040_develop, RP2040_custom, custom_develop

build_flags =
  ${RP2040_develop.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_develop.build_flags}

[env:develop_REG1_ETH]
extends = env:develop_RP2040
build_flags =
  ${env:develop_RP2040.build_flags}
  -D OKNXHW_REG1_ETH
  -D OPENKNX_DUALCORE

[env:develop_REG1_ETH_USB]
extends = env:develop_REG1_ETH, RP2040_UPLOAD_USB

; Releases
[env:release_REG1_ETH]
extends = RP2040_releases, RP2040_custom, RP2040_UPLOAD_USB
build_flags =
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${custom.build_flags}  
  -D OKNXHW_REG1_ETH
  -D OPENKNX_DUALCORE
  
[env:release_DEV_BOARD]
extends = RP2040_releases, RP2040_custom, RP2040_EXCHANGE_2MB, RP2040_UPLOAD_USB
build_flags =
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  ${custom.build_flags}
  -D OKNXHW_REG1_ETH
  -D OPENKNX_DUALCORE
  

; ESP32
[ESP32_custom]
extends = ESP32, custom
build_flags =
  #-D OPENKNX_RUNTIME_STAT
  ${KNX_TP.build_flags}
  ${BASE.build_flags}
  -D KNX_IP_WIFI
  -D KNX_NETIF=WiFi


[board_AZDelivery_ESP32_Dev_Kit_C_V4]
board = esp32dev
board_build.partitions = esp_partition.csv
build_flags =
  -D SERIAL_DEBUG=Serial
  -D KNX_SERIAL=Serial2
 # -D LED_BUILTIN=2
 # -D PROG_LED_PIN=LED_BUILTIN
  -D PROG_LED_PIN=9
  -D PROG_LED_PIN_ACTIVE_ON=HIGH
 # -D PROG_BUTTON_PIN=38
 -D PROG_BUTTON_PIN=10

[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4]
extends = ESP32_custom, custom_develop, board_AZDelivery_ESP32_Dev_Kit_C_V4
build_flags =
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  ${board_AZDelivery_ESP32_Dev_Kit_C_V4.build_flags}
 
[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4_USB]
extends = env:develop_AZDelivery_ESP32_Dev_Kit_C_V4, ESP32_UPLOAD_USB

[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4_OTA]
extends = env:develop_AZDelivery_ESP32_Dev_Kit_C_V4
upload_protocol = espota
upload_port = 192.168.0.30 # IP Address

[board_Adafruit_Feather_ESP32_V2]
build_flags =
  -D SERIAL_DEBUG=Serial
  -D KNX_SERIAL=Serial1
  -D KNX_UART_RX_PIN=34
  -D KNX_UART_TX_PIN=25
  -D PROG_LED_PIN=LED_BUILTIN
  -D PROG_LED_PIN_ACTIVE_ON=HIGH
  -D PROG_BUTTON_PIN=38
  -D KNX_IP_WIFI
  -D KNX_NETIF=WiFi
board = adafruit_feather_esp32_v2
board_build.partitions = esp_partition_8MB.csv


[env:develop_Adafruit_Feather_ESP32_V2]
extends = ESP32_custom, custom_develop, board_Adafruit_Feather_ESP32_V2
build_flags =
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  ${board_Adafruit_Feather_ESP32_V2.build_flags}


[env:develop_Adafruit_Feather_ESP32_V2_USB]
extends = env:develop_Adafruit_Feather_ESP32_V2, ESP32_UPLOAD_USB

[env:develop_Adafruit_Feather_ESP32_V2_OTA]
extends = env:develop_Adafruit_Feather_ESP32_V2
upload_protocol = espota
upload_port = 192.168.0.30 # IP Address
